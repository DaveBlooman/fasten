// Code generated by go-bindata.
// sources:
// libraries/amzlinux/definition.yaml
// libraries/amzlinux/nodejs/install.yaml
// libraries/amzlinux/nodejs/nodejs.sh
// libraries/amzlinux/ruby/install.yaml
// libraries/amzlinux/ruby/ruby.sh
// libraries/ubuntu1604/nodejs.sh
// libraries/ubuntu1604/ruby.sh
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _librariesAmzlinuxDefinitionYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4b\xcc\x4d\xb5\x52\x48\xcc\xad\xca\xc9\xcc\x2b\xad\xe0\xca\xc8\x07\x71\x95\xf4\x41\xb4\x7e\x6a\xb2\x91\x6e\x69\x71\x6a\x91\x12\x17\x20\x00\x00\xff\xff\xb3\x59\x76\x81\x26\x00\x00\x00")

func librariesAmzlinuxDefinitionYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxDefinitionYaml,
		"libraries/amzlinux/definition.yaml",
	)
}

func librariesAmzlinuxDefinitionYaml() (*asset, error) {
	bytes, err := librariesAmzlinuxDefinitionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/definition.yaml", size: 38, mode: os.FileMode(420), modTime: time.Unix(1483198862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxNodejsInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\x4a\xd5\x4d\xce\xcf\xcd\x4d\xcc\x4b\xb1\x52\xc8\x29\xe6\x82\xb3\xf3\x0a\x72\x15\x32\xf3\x8a\x4b\x12\x73\x72\xb8\x00\x01\x00\x00\xff\xff\x6c\x32\x79\xd0\x25\x00\x00\x00")

func librariesAmzlinuxNodejsInstallYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxNodejsInstallYaml,
		"libraries/amzlinux/nodejs/install.yaml",
	)
}

func librariesAmzlinuxNodejsInstallYaml() (*asset, error) {
	bytes, err := librariesAmzlinuxNodejsInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/nodejs/install.yaml", size: 37, mode: os.FileMode(420), modTime: time.Unix(1483236559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxNodejsNodejsSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\x3b\xaa\xc3\x30\x10\x46\xe1\x5e\xab\xf8\x2f\xb7\x34\x63\x95\x81\x6c\x26\xc8\xe3\x21\x56\xa2\x17\x9e\x11\xd8\x90\xc5\x07\xb9\x4c\x7d\xe0\x3b\xff\x7f\x7e\x89\xc5\x2f\x41\x37\xe7\x54\x0c\x24\xfd\x70\xee\xec\x19\xbd\xad\xc1\x04\x74\x3a\xee\x7b\x02\x91\xc6\x24\xc5\x40\x94\x2a\x07\x8b\xb5\x60\x33\x6b\x7a\xf7\x7e\x6f\x79\x2e\x75\x15\xad\x7d\x67\x99\xb9\x66\xaf\x62\xbd\x3d\x6e\xf3\x81\x0f\x86\x0e\xba\xd0\x58\xd4\x42\x4a\xa0\x13\x4f\x66\xe2\x69\x42\x0e\xef\xeb\xf2\x93\x87\xf7\xd2\x11\xbe\x01\x00\x00\xff\xff\x53\x9c\xdb\x1e\xa4\x00\x00\x00")

func librariesAmzlinuxNodejsNodejsShBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxNodejsNodejsSh,
		"libraries/amzlinux/nodejs/nodejs.sh",
	)
}

func librariesAmzlinuxNodejsNodejsSh() (*asset, error) {
	bytes, err := librariesAmzlinuxNodejsNodejsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/nodejs/nodejs.sh", size: 164, mode: os.FileMode(420), modTime: time.Unix(1484512387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxRubyInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\x4a\x8d\x4f\xce\xcf\xcd\x4d\xcc\x4b\xb1\x52\x48\x4f\xcd\x55\xc8\xcc\x2b\x2e\x49\xcc\xc9\x51\x48\x2a\xcd\x4b\xc9\x49\x2d\xe2\x82\x4b\x42\x04\x60\xf2\x5c\x80\x00\x00\x00\xff\xff\x98\xd3\x76\xaf\x39\x00\x00\x00")

func librariesAmzlinuxRubyInstallYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxRubyInstallYaml,
		"libraries/amzlinux/ruby/install.yaml",
	)
}

func librariesAmzlinuxRubyInstallYaml() (*asset, error) {
	bytes, err := librariesAmzlinuxRubyInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/ruby/install.yaml", size: 57, mode: os.FileMode(420), modTime: time.Unix(1483311047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxRubyRubySh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8e\xbd\x0a\xc2\x40\x10\x84\xfb\x7d\x8a\x35\xda\xae\x27\xb1\x13\x0c\xd8\x59\x5a\xf8\x02\x77\xc9\x60\x02\xf9\xe3\xf6\x4e\x72\x3e\xbd\x24\x1a\x04\x9b\x59\x66\x3e\x58\xbe\xed\xc6\xb8\xa6\x37\xce\x6a\x4d\xa4\x08\x2c\x88\x13\x51\x8a\x1d\xc7\xb1\xb2\x01\x2c\x69\x69\xf0\x56\xc1\x3e\xba\x94\x1f\x96\xb3\x82\xa6\xd7\x60\xdb\xf6\x83\x8e\x52\xe1\x89\xb5\xf0\xab\x6d\xdc\x12\xdf\x59\x12\x3d\xf0\xfb\x2c\x9a\x34\xa0\x23\x94\xf5\xc0\x19\xa6\x71\xf0\x81\x6f\x97\xfb\xf5\xbc\x9b\xf3\x64\xea\xa1\x83\x41\x99\x4b\x54\xf8\x59\x34\xe3\xa2\xe0\xbf\x79\x3f\xcb\xfb\x92\xde\x01\x00\x00\xff\xff\x02\x2a\x0e\x8b\xcb\x00\x00\x00")

func librariesAmzlinuxRubyRubyShBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxRubyRubySh,
		"libraries/amzlinux/ruby/ruby.sh",
	)
}

func librariesAmzlinuxRubyRubySh() (*asset, error) {
	bytes, err := librariesAmzlinuxRubyRubyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/ruby/ruby.sh", size: 203, mode: os.FileMode(420), modTime: time.Unix(1484512364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesUbuntu1604NodejsSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func librariesUbuntu1604NodejsShBytes() ([]byte, error) {
	return bindataRead(
		_librariesUbuntu1604NodejsSh,
		"libraries/ubuntu1604/nodejs.sh",
	)
}

func librariesUbuntu1604NodejsSh() (*asset, error) {
	bytes, err := librariesUbuntu1604NodejsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ubuntu1604/nodejs.sh", size: 0, mode: os.FileMode(420), modTime: time.Unix(1483118317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesUbuntu1604RubySh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x2a\x2e\x4d\xc9\x57\xa8\x2c\xcd\x55\xc8\xcc\x2b\x2e\x49\xcc\xc9\x51\x28\x2a\x4d\xaa\xd4\x4d\x49\x2d\x4b\x85\x30\x15\xd2\xf3\x15\x2a\x92\x93\x74\x4b\x4b\x32\x73\x14\x74\x2b\xb9\x00\x01\x00\x00\xff\xff\xa6\x58\x98\xfc\x3d\x00\x00\x00")

func librariesUbuntu1604RubyShBytes() ([]byte, error) {
	return bindataRead(
		_librariesUbuntu1604RubySh,
		"libraries/ubuntu1604/ruby.sh",
	)
}

func librariesUbuntu1604RubySh() (*asset, error) {
	bytes, err := librariesUbuntu1604RubyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ubuntu1604/ruby.sh", size: 61, mode: os.FileMode(420), modTime: time.Unix(1483038579, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"libraries/amzlinux/definition.yaml": librariesAmzlinuxDefinitionYaml,
	"libraries/amzlinux/nodejs/install.yaml": librariesAmzlinuxNodejsInstallYaml,
	"libraries/amzlinux/nodejs/nodejs.sh": librariesAmzlinuxNodejsNodejsSh,
	"libraries/amzlinux/ruby/install.yaml": librariesAmzlinuxRubyInstallYaml,
	"libraries/amzlinux/ruby/ruby.sh": librariesAmzlinuxRubyRubySh,
	"libraries/ubuntu1604/nodejs.sh": librariesUbuntu1604NodejsSh,
	"libraries/ubuntu1604/ruby.sh": librariesUbuntu1604RubySh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"libraries": &bintree{nil, map[string]*bintree{
		"amzlinux": &bintree{nil, map[string]*bintree{
			"definition.yaml": &bintree{librariesAmzlinuxDefinitionYaml, map[string]*bintree{}},
			"nodejs": &bintree{nil, map[string]*bintree{
				"install.yaml": &bintree{librariesAmzlinuxNodejsInstallYaml, map[string]*bintree{}},
				"nodejs.sh": &bintree{librariesAmzlinuxNodejsNodejsSh, map[string]*bintree{}},
			}},
			"ruby": &bintree{nil, map[string]*bintree{
				"install.yaml": &bintree{librariesAmzlinuxRubyInstallYaml, map[string]*bintree{}},
				"ruby.sh": &bintree{librariesAmzlinuxRubyRubySh, map[string]*bintree{}},
			}},
		}},
		"ubuntu1604": &bintree{nil, map[string]*bintree{
			"nodejs.sh": &bintree{librariesUbuntu1604NodejsSh, map[string]*bintree{}},
			"ruby.sh": &bintree{librariesUbuntu1604RubySh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

