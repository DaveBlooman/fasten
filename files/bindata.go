// Code generated by go-bindata.
// sources:
// libraries/amzlinux/golang/golang.sh
// libraries/amzlinux/golang/install.yaml
// libraries/amzlinux/nodejs/install.yaml
// libraries/amzlinux/nodejs/nodejs.sh
// libraries/amzlinux/ruby/install.yaml
// libraries/amzlinux/ruby/ruby.sh
// libraries/definition.yaml
// libraries/ubuntu1604/golang/golang.sh
// libraries/ubuntu1604/golang/install.yaml
// libraries/ubuntu1604/nodejs/install.yaml
// libraries/ubuntu1604/nodejs/nodejs.sh
// libraries/ubuntu1604/ruby/install.yaml
// libraries/ubuntu1604/ruby/ruby.sh
// DO NOT EDIT!

package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _librariesAmzlinuxGolangGolangSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x2a\x4e\x2d\x51\xd0\x4d\x2d\xad\xe0\xe2\xaa\x2c\xcd\x55\x28\x2d\x48\x49\x2c\x49\x55\xd0\xad\xe4\x02\x04\x00\x00\xff\xff\x68\x62\x63\x09\x25\x00\x00\x00")

func librariesAmzlinuxGolangGolangShBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxGolangGolangSh,
		"libraries/amzlinux/golang/golang.sh",
	)
}

func librariesAmzlinuxGolangGolangSh() (*asset, error) {
	bytes, err := librariesAmzlinuxGolangGolangShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/golang/golang.sh", size: 37, mode: os.FileMode(420), modTime: time.Unix(1505048785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxGolangInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\x4a\x8d\x4f\xce\xcf\xcd\x4d\xcc\x4b\xb1\xe2\x82\x31\x14\xf2\xf2\xf3\x52\xb9\x92\x4a\x33\x73\x52\xe2\x73\xf2\x93\x13\x73\xac\x14\x4a\x8a\x4a\x53\xb9\x00\x01\x00\x00\xff\xff\x60\xee\xe4\x6d\x2d\x00\x00\x00")

func librariesAmzlinuxGolangInstallYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxGolangInstallYaml,
		"libraries/amzlinux/golang/install.yaml",
	)
}

func librariesAmzlinuxGolangInstallYaml() (*asset, error) {
	bytes, err := librariesAmzlinuxGolangInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/golang/install.yaml", size: 45, mode: os.FileMode(420), modTime: time.Unix(1505056531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxNodejsInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\x4a\x8d\x4f\xce\xcf\xcd\x4d\xcc\x4b\xb1\x52\xc8\xcb\x4f\x49\x55\xd0\xd5\x2d\x4b\x2d\x2a\xce\xcc\xcf\xe3\x42\x88\x17\xe4\x2a\x64\xe6\x15\x97\x24\xe6\xe4\x70\x25\x95\x66\xe6\xa4\xc4\xe7\xe4\x27\x27\xe6\x58\x29\xa4\x25\xe6\x14\xa7\x72\x01\x02\x00\x00\xff\xff\x15\x7d\x11\x6e\x44\x00\x00\x00")

func librariesAmzlinuxNodejsInstallYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxNodejsInstallYaml,
		"libraries/amzlinux/nodejs/install.yaml",
	)
}

func librariesAmzlinuxNodejsInstallYaml() (*asset, error) {
	bytes, err := librariesAmzlinuxNodejsInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/nodejs/install.yaml", size: 68, mode: os.FileMode(420), modTime: time.Unix(1505049425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxNodejsNodejsSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\x3b\xaa\xc3\x30\x10\x46\xe1\x5e\xab\xf8\x2f\xb7\x34\x63\x95\x81\x6c\x26\xc8\xe3\x21\x56\xa2\x17\x9e\x11\xd8\x90\xc5\x07\xb9\x4c\x7d\xe0\x3b\xff\x7f\x7e\x89\xc5\x2f\x41\x37\xe7\x54\x0c\x24\xfd\x70\xee\xec\x19\xbd\xad\xc1\x04\x74\x3a\xee\x7b\x02\x91\xc6\x24\xc5\x40\x94\x2a\x07\x8b\xb5\x60\x33\x6b\x7a\xf7\x7e\x6f\x79\x2e\x75\x15\xad\x7d\x67\x99\xb9\x66\xaf\x62\xbd\x3d\x6e\xf3\x81\x0f\x86\x0e\xba\xd0\x58\xd4\x42\x4a\xa0\x13\x4f\x66\xe2\x69\x42\x0e\xef\xeb\xf2\x93\x87\xf7\xd2\x11\xbe\x01\x00\x00\xff\xff\x53\x9c\xdb\x1e\xa4\x00\x00\x00")

func librariesAmzlinuxNodejsNodejsShBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxNodejsNodejsSh,
		"libraries/amzlinux/nodejs/nodejs.sh",
	)
}

func librariesAmzlinuxNodejsNodejsSh() (*asset, error) {
	bytes, err := librariesAmzlinuxNodejsNodejsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/nodejs/nodejs.sh", size: 164, mode: os.FileMode(420), modTime: time.Unix(1484512387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxRubyInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\x4a\x8d\x4f\xce\xcf\xcd\x4d\xcc\x4b\xb1\x52\x48\x4f\xcd\x55\xc8\xcc\x2b\x2e\x49\xcc\xc9\x51\x48\x2a\xcd\x4b\xc9\x49\x2d\xe2\x82\x4b\x42\x04\x60\xf2\x5c\x49\xa5\x99\x39\x29\xf1\x39\xf9\xc9\x89\x39\x56\x0a\x69\x89\x39\xc5\xa9\x5c\x80\x00\x00\x00\xff\xff\x30\x42\x4a\x76\x4c\x00\x00\x00")

func librariesAmzlinuxRubyInstallYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxRubyInstallYaml,
		"libraries/amzlinux/ruby/install.yaml",
	)
}

func librariesAmzlinuxRubyInstallYaml() (*asset, error) {
	bytes, err := librariesAmzlinuxRubyInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/ruby/install.yaml", size: 76, mode: os.FileMode(420), modTime: time.Unix(1505049425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesAmzlinuxRubyRubySh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xc1\x6a\xc6\x20\x10\x84\xef\x3e\xc5\x36\x2d\xe4\x64\x2d\xe9\xad\xd0\x40\xa1\x87\x1e\x7b\xc8\x0b\xa8\x59\x12\x41\xa3\xb8\x5a\x62\x9f\xbe\x98\x2a\x3f\xfc\x97\x1d\x66\x3e\x61\x64\x1e\x1f\x84\x32\x87\x50\x92\x76\xc6\x08\x13\x70\xcc\x27\x63\x25\x3b\xc8\x61\x95\x09\x81\x97\xcb\x61\x94\x84\x10\xb3\x2a\xd3\xcb\x25\x1d\x98\x83\x92\xb4\xf6\x1f\xbd\xf2\x15\x7f\xb0\x1b\xf8\xb5\x46\x5d\xa7\xc5\x9b\xd6\x60\x8d\x3a\x9d\x9d\xba\x36\x52\x1d\xd9\xd4\xb5\xa5\xad\x62\x8b\x3e\x87\xde\x33\x7e\x56\xe4\x83\xc3\x23\xc1\xe2\xbd\xa5\xb1\xbe\xdb\xf0\xf6\x63\x4e\x85\x12\x3a\x86\x7a\xf7\x30\xe0\x19\x7c\x4c\xf0\xfd\xb1\x7c\xbd\x3f\xd5\xfb\x26\x76\xef\x50\xa0\x9e\x78\x26\x8c\x75\x80\x01\xe6\x19\xee\xe2\xe7\x3a\x4a\xd4\xec\x2f\x00\x00\xff\xff\xf2\x4b\x38\x28\x23\x01\x00\x00")

func librariesAmzlinuxRubyRubyShBytes() ([]byte, error) {
	return bindataRead(
		_librariesAmzlinuxRubyRubySh,
		"libraries/amzlinux/ruby/ruby.sh",
	)
}

func librariesAmzlinuxRubyRubySh() (*asset, error) {
	bytes, err := librariesAmzlinuxRubyRubyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/amzlinux/ruby/ruby.sh", size: 291, mode: os.FileMode(420), modTime: time.Unix(1491148266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesDefinitionYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcc\xad\xca\xc9\xcc\x2b\xad\xb0\xe2\x52\x50\xc8\xc8\xcf\x4d\xb5\x52\xd0\x07\x51\xfa\xa9\xc9\x46\xba\xa5\xc5\xa9\x45\x5c\x0a\x0a\xc5\xc5\x19\xf1\x20\xa6\x95\x02\x92\x60\x59\x6a\x51\x71\x66\x7e\x9e\x95\x02\xcc\x00\xae\xd2\xa4\xd2\xbc\x92\x52\x43\x33\x03\x13\x74\xb3\x20\x32\x28\x26\xc1\x85\xe0\xe6\x20\xb4\x73\x01\x02\x00\x00\xff\xff\x02\x68\xdc\x46\x94\x00\x00\x00")

func librariesDefinitionYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesDefinitionYaml,
		"libraries/definition.yaml",
	)
}

func librariesDefinitionYaml() (*asset, error) {
	bytes, err := librariesDefinitionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/definition.yaml", size: 148, mode: os.FileMode(420), modTime: time.Unix(1491149773, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesUbuntu1604GolangGolangSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x2a\x4e\x2d\x51\xd0\x4d\x2d\xad\xe0\xe2\x4a\x2c\x28\xd1\x4d\x4f\x2d\x51\x28\x2d\x48\x49\x2c\x49\x55\xd0\xad\xe4\x02\x04\x00\x00\xff\xff\x05\x18\x37\x92\x29\x00\x00\x00")

func librariesUbuntu1604GolangGolangShBytes() ([]byte, error) {
	return bindataRead(
		_librariesUbuntu1604GolangGolangSh,
		"libraries/ubuntu1604/golang/golang.sh",
	)
}

func librariesUbuntu1604GolangGolangSh() (*asset, error) {
	bytes, err := librariesUbuntu1604GolangGolangShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ubuntu1604/golang/golang.sh", size: 41, mode: os.FileMode(420), modTime: time.Unix(1505048766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesUbuntu1604GolangInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\x4a\x8d\x4f\xce\xcf\xcd\x4d\xcc\x4b\xb1\xe2\x82\x31\x14\xf2\xf2\xf3\x52\xb9\x92\x4a\x33\x73\x52\xe2\x73\xf2\x93\x13\x73\xac\x14\x4a\x8a\x4a\x53\xb9\x00\x01\x00\x00\xff\xff\x60\xee\xe4\x6d\x2d\x00\x00\x00")

func librariesUbuntu1604GolangInstallYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesUbuntu1604GolangInstallYaml,
		"libraries/ubuntu1604/golang/install.yaml",
	)
}

func librariesUbuntu1604GolangInstallYaml() (*asset, error) {
	bytes, err := librariesUbuntu1604GolangInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ubuntu1604/golang/install.yaml", size: 45, mode: os.FileMode(420), modTime: time.Unix(1505052330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesUbuntu1604NodejsInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\x4a\x8d\x4f\xce\xcf\xcd\x4d\xcc\x4b\xb1\x52\xc8\xcb\x4f\x49\x55\xd0\xd5\x2d\x4b\x2d\x2a\xce\xcc\xcf\xe3\x42\x88\x17\xe4\x2a\x64\xe6\x15\x97\x24\xe6\xe4\x70\x25\x95\x66\xe6\xa4\xc4\xe7\xe4\x27\x27\xe6\x58\x29\xa4\x25\xe6\x14\xa7\x72\x01\x02\x00\x00\xff\xff\x15\x7d\x11\x6e\x44\x00\x00\x00")

func librariesUbuntu1604NodejsInstallYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesUbuntu1604NodejsInstallYaml,
		"libraries/ubuntu1604/nodejs/install.yaml",
	)
}

func librariesUbuntu1604NodejsInstallYaml() (*asset, error) {
	bytes, err := librariesUbuntu1604NodejsInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ubuntu1604/nodejs/install.yaml", size: 68, mode: os.FileMode(420), modTime: time.Unix(1505049425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesUbuntu1604NodejsNodejsSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\x3d\x0a\x02\x31\x10\x47\xf1\x3e\xa7\xf8\x8b\xf5\x24\xa5\x60\x6f\xe7\x1d\x24\x1f\x83\x1b\x89\x49\xd8\x99\x81\x5d\xf0\xf0\xb2\x8d\x95\x07\x78\xbf\x77\x3e\x85\x54\x7b\x48\x51\x16\xe7\x84\x15\xc4\xb6\x39\x17\xa7\xd2\x93\x15\x36\x4b\x54\x06\xed\x2e\xdb\xda\x40\x72\xc7\xa2\x3a\xe5\x1a\x42\xe1\xe4\xfb\x28\x2c\xc3\xd6\xcc\x3e\x8f\x77\x10\x56\x9b\x8f\x8b\xdf\xf0\x81\x58\x19\xa0\x1b\x0e\x19\xf4\x03\x6b\x17\x8d\xad\x81\x76\x1c\xf1\x4b\x90\xac\xb6\x42\x2c\xc2\x5d\x6b\x6c\x7f\xd6\xdf\x00\x00\x00\xff\xff\x8c\x73\x00\x0a\xa4\x00\x00\x00")

func librariesUbuntu1604NodejsNodejsShBytes() ([]byte, error) {
	return bindataRead(
		_librariesUbuntu1604NodejsNodejsSh,
		"libraries/ubuntu1604/nodejs/nodejs.sh",
	)
}

func librariesUbuntu1604NodejsNodejsSh() (*asset, error) {
	bytes, err := librariesUbuntu1604NodejsNodejsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ubuntu1604/nodejs/nodejs.sh", size: 164, mode: os.FileMode(420), modTime: time.Unix(1505051148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesUbuntu1604RubyInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\x4a\x8d\x4f\xce\xcf\xcd\x4d\xcc\x4b\xb1\x52\x48\x4f\xcd\x55\xc8\xcc\x2b\x2e\x49\xcc\xc9\x51\x48\x2a\xcd\x4b\xc9\x49\x2d\xe2\x82\x4b\x42\x04\x60\xf2\x5c\x49\xa5\x99\x39\x29\xf1\x39\xf9\xc9\x89\x39\x56\x0a\x69\x89\x39\xc5\xa9\x5c\x80\x00\x00\x00\xff\xff\x30\x42\x4a\x76\x4c\x00\x00\x00")

func librariesUbuntu1604RubyInstallYamlBytes() ([]byte, error) {
	return bindataRead(
		_librariesUbuntu1604RubyInstallYaml,
		"libraries/ubuntu1604/ruby/install.yaml",
	)
}

func librariesUbuntu1604RubyInstallYaml() (*asset, error) {
	bytes, err := librariesUbuntu1604RubyInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ubuntu1604/ruby/install.yaml", size: 76, mode: os.FileMode(420), modTime: time.Unix(1505049425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesUbuntu1604RubyRubySh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\x4d\x6e\x84\x30\x0c\x85\xf7\x39\x85\xab\xae\x43\x3a\x4c\x57\x3d\x46\x6f\x10\x83\x87\xb1\x64\x02\x8d\xed\x29\xf4\xf4\x15\x4c\x41\x5d\xbd\x9f\x2f\xca\x93\xfc\xfa\x92\x90\x4b\xc2\xac\xf7\x10\x94\x0c\x22\xf9\x12\x42\x9e\x2d\x0e\x64\xe0\x73\x9f\x8d\x20\xae\x67\xc3\x45\x2d\x8b\x40\x75\x5c\xdb\xe6\x7a\x68\xec\xe9\x01\x03\x5b\xec\xa6\x4a\xd0\x79\x15\xf8\x11\xc6\xcb\xb0\x03\x74\x96\x3e\x92\x2a\x15\xe3\x2c\x20\x8c\xaa\xb2\x23\x61\xac\x94\x7b\xe1\x42\x47\x5e\xf3\x78\x32\xfd\x12\x36\x7a\x7e\xff\xe7\xb7\x7a\x19\xa5\x3d\x9e\x2c\x2a\x76\x39\xc2\xb6\xfc\x1e\xa7\x99\xca\xbf\x81\xdb\x8d\x77\x1b\xd7\x10\xba\xfb\xf4\x5d\x20\x7e\x82\xa3\x17\xf3\x8f\xa7\x40\x72\xad\x49\xa6\x2e\xcb\x76\x0f\x48\x8f\x5c\x93\x30\xa6\x81\x46\x4d\x6d\x73\x6d\xde\xc2\x6f\x00\x00\x00\xff\xff\xe0\x3f\x78\x97\x2b\x01\x00\x00")

func librariesUbuntu1604RubyRubyShBytes() ([]byte, error) {
	return bindataRead(
		_librariesUbuntu1604RubyRubySh,
		"libraries/ubuntu1604/ruby/ruby.sh",
	)
}

func librariesUbuntu1604RubyRubySh() (*asset, error) {
	bytes, err := librariesUbuntu1604RubyRubyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ubuntu1604/ruby/ruby.sh", size: 299, mode: os.FileMode(420), modTime: time.Unix(1491148266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"libraries/amzlinux/golang/golang.sh": librariesAmzlinuxGolangGolangSh,
	"libraries/amzlinux/golang/install.yaml": librariesAmzlinuxGolangInstallYaml,
	"libraries/amzlinux/nodejs/install.yaml": librariesAmzlinuxNodejsInstallYaml,
	"libraries/amzlinux/nodejs/nodejs.sh": librariesAmzlinuxNodejsNodejsSh,
	"libraries/amzlinux/ruby/install.yaml": librariesAmzlinuxRubyInstallYaml,
	"libraries/amzlinux/ruby/ruby.sh": librariesAmzlinuxRubyRubySh,
	"libraries/definition.yaml": librariesDefinitionYaml,
	"libraries/ubuntu1604/golang/golang.sh": librariesUbuntu1604GolangGolangSh,
	"libraries/ubuntu1604/golang/install.yaml": librariesUbuntu1604GolangInstallYaml,
	"libraries/ubuntu1604/nodejs/install.yaml": librariesUbuntu1604NodejsInstallYaml,
	"libraries/ubuntu1604/nodejs/nodejs.sh": librariesUbuntu1604NodejsNodejsSh,
	"libraries/ubuntu1604/ruby/install.yaml": librariesUbuntu1604RubyInstallYaml,
	"libraries/ubuntu1604/ruby/ruby.sh": librariesUbuntu1604RubyRubySh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"libraries": &bintree{nil, map[string]*bintree{
		"amzlinux": &bintree{nil, map[string]*bintree{
			"golang": &bintree{nil, map[string]*bintree{
				"golang.sh": &bintree{librariesAmzlinuxGolangGolangSh, map[string]*bintree{}},
				"install.yaml": &bintree{librariesAmzlinuxGolangInstallYaml, map[string]*bintree{}},
			}},
			"nodejs": &bintree{nil, map[string]*bintree{
				"install.yaml": &bintree{librariesAmzlinuxNodejsInstallYaml, map[string]*bintree{}},
				"nodejs.sh": &bintree{librariesAmzlinuxNodejsNodejsSh, map[string]*bintree{}},
			}},
			"ruby": &bintree{nil, map[string]*bintree{
				"install.yaml": &bintree{librariesAmzlinuxRubyInstallYaml, map[string]*bintree{}},
				"ruby.sh": &bintree{librariesAmzlinuxRubyRubySh, map[string]*bintree{}},
			}},
		}},
		"definition.yaml": &bintree{librariesDefinitionYaml, map[string]*bintree{}},
		"ubuntu1604": &bintree{nil, map[string]*bintree{
			"golang": &bintree{nil, map[string]*bintree{
				"golang.sh": &bintree{librariesUbuntu1604GolangGolangSh, map[string]*bintree{}},
				"install.yaml": &bintree{librariesUbuntu1604GolangInstallYaml, map[string]*bintree{}},
			}},
			"nodejs": &bintree{nil, map[string]*bintree{
				"install.yaml": &bintree{librariesUbuntu1604NodejsInstallYaml, map[string]*bintree{}},
				"nodejs.sh": &bintree{librariesUbuntu1604NodejsNodejsSh, map[string]*bintree{}},
			}},
			"ruby": &bintree{nil, map[string]*bintree{
				"install.yaml": &bintree{librariesUbuntu1604RubyInstallYaml, map[string]*bintree{}},
				"ruby.sh": &bintree{librariesUbuntu1604RubyRubySh, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

